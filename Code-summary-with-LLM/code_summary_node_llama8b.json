{
    "jest.config.js": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * Jest configuration file.\n *\n * This file exports an object that defines the configuration for Jest, a popular JavaScript testing framework.\n * It specifies various settings that control how Jest runs and reports tests, including the file patterns to match,\n * the file extensions to consider, and the mapping of aliases to actual file paths.\n *\n * Main purpose:\n * The main purpose of this file is to configure Jest to run tests in a specific way, including specifying the test\n * files to run, the file extensions to consider, and the mapping of aliases to actual file paths.\n *\n * Functionality:\n * This file exports an object with the following properties:\n * - testRegex: A regular expression that matches the file patterns to consider for testing.\n * - moduleFileExtensions: An array of file extensions to consider for testing.\n * - moduleNameMapper: An object that maps aliases to",
    "next-env.d.ts": "// This file is generated by next build\n// and will be overwritten on next build\n\n// Importing the necessary modules\nimport { NextPage } from 'next';\nimport { AppProps } from 'next/app';\nimport { ImageProps } from 'next/image';\n\n// Exporting the page component\nexport { default as _app } from './_app';\nexport { default as _document } from './_document';\nexport { default as _error } from './_error';\n\n// Exporting the page components\nexport { default as _page } from './_page';\nexport { default as _404 } from './_404';\nexport { default as _500 } from './_500';\n\n// Exporting the image components\nexport { default as Image } from './Image';\nexport { default as ImageContainer } from './ImageContainer';\n\n// Exporting the layout components\nexport { default as Layout } from './Layout';\nexport { default as Header } from './Header';\nexport { default as",
    "jest.setup.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * Summary:\n * This file contains setup and teardown logic for Jest tests, ensuring that the test environment is properly cleaned up after each test execution.\n *\n * Main Purpose:\n * The main purpose of this file is to clear all mocks and perform cleanup operations after each test execution, ensuring that the test environment remains in a consistent state.\n *\n * Functionality:\n * This file imports necessary utilities from `@test/utils` and `@testing-library/jest-dom/extend-expect`, and uses the `afterEach` hook to execute the following operations after each test:\n * - Clear all mocks using `jest.clearAllMocks()`: This ensures that any mock functions created during the test are reset to their original state, preventing any side effects or interference with subsequent tests.\n * - Perform cleanup using `cleanup()`: This function is assumed to contain custom cleanup logic specific to the",
    "types/data.ts": "```\n\nHere is the code with a detailed comment:\n\n```typescript\n/**\n * This file contains the definitions for various data interfaces used throughout the application.\n * \n * The interfaces defined here are used to represent different types of data, including form data, table items, and list items.\n * \n * The main purpose of this file is to provide a centralized location for defining the structure of these data types, making it easier to work with them throughout the application.\n */\n\n// Interface representing the data structure of a form submission\nexport interface FormData {\n    /**\n     * A brief description of the item\n     */\n    description: string;\n    /**\n     * A flag indicating whether the item is visible\n     */\n    isVisible: boolean;\n    /**\n     * The name of the item\n     */\n    name: string;\n    /**\n     * The price of the item\n     */\n    price: number;\n    /**\n     * The type of the item\n     */\n    type: string;\n}\n\n// Interface",
    "types/order.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```typescript\n/**\n * This file defines a set of interfaces for representing order-related data.\n * \n * The interfaces are designed to capture the essential information required for \n * managing orders, including billing and shipping addresses, order products, \n * and order details. The interfaces are flexible and allow for additional fields \n * to be added as needed.\n * \n * The main purpose of this file is to provide a standardized way of representing \n * order data, making it easier to work with and manipulate order information in \n * the application.\n * \n * The interfaces defined in this file are:\n * - BillingAddress: represents a billing address\n * - ShippingAddress: represents a shipping address\n * - OrderProduct: represents an order product\n * - Order: represents an order\n * - ShippingAndProductsInfo: represents shipping and products information\n */\n\nexport interface BillingAddress {\n    /**\n    ",
    "types/index.ts": "export * from './payment';\nexport * from './product';\nexport * from './user';\n\n// Importing all exports from the respective modules\n// This file is used to export all the necessary functions and classes from the different modules\n// It serves as a central hub for importing all the necessary functionality from the different modules\n// The main purpose of this file is to provide a single point of entry for importing all the necessary functionality\n// The functionality includes authentication, data manipulation, database operations, error handling, order management, payment processing, product management, and user management\n\n// The exports are grouped by functionality, making it easier to import the necessary functionality for a specific use case\n// This file can be used as a starting point for importing all the necessary functionality for a specific use case\n// The exports can be imported individually or collectively, depending on the specific use case\n\n// The main functionality of this file is to provide a centralized location for importing all the necessary functionality\n// It makes it easier",
    "types/db.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```\n/**\n * Data Access Object (DAO) interface for interacting with the database.\n * This interface defines the methods that can be used to store and retrieve data\n * from the database, including user and store information.\n *\n * The main purpose of this file is to provide a standardized way of interacting\n * with the database, allowing different parts of the application to access and\n * manipulate data in a consistent and predictable manner.\n *\n * The interface defines several methods that can be used to perform various\n * operations, such as:\n * - Checking if a user has a store\n * - Setting a user's session data\n * - Setting a store's data\n * - Setting a user's data for a store\n * - Retrieving a store's token\n * - Deleting a store\n * - Deleting a user\n *\n * The methods are asynchronous and return promises, allowing the",
    "types/auth.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```\n/**\n * Authentication and Session Management Interfaces\n *\n * This file defines a set of interfaces for managing user authentication and sessions.\n * It provides a standardized way to represent user data, session properties, and query parameters.\n *\n * The main purpose of this file is to provide a common interface for various authentication and session management use cases.\n * It enables developers to work with user data and session properties in a consistent and type-safe manner.\n *\n * The interfaces defined in this file can be used to:\n * - Represent user data, including email, ID, and username\n * - Define session properties, such as access tokens, context, and user information\n * - Handle query parameters, including key-value pairs and arrays\n * - Configure API settings, including API URLs and login URLs\n *\n * Overall, this file provides a solid foundation for building robust authentication and session management systems.\n */\n\nexport",
    "test/mocks/hooks.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```\n/**\n * Mocks for useProducts, useProductList, and useProductInfo hooks.\n *\n * This file provides mock implementations for the useProducts, useProductList, and useProductInfo hooks.\n * These mocks can be used to test components that rely on these hooks without actually making API calls.\n *\n * The main purpose of this file is to provide a set of reusable mock implementations that can be used across the application.\n * Each mock implementation returns a fixed set of data that can be used to test the behavior of components that rely on these hooks.\n *\n * The file exports three main functions:\n * - useProducts: returns a mock summary object with fixed values for inventory count, variant count, and primary category name.\n * - useProductList: returns a list of mock table items with fixed values for id, name, price, and stock.\n * - useProductList",
    "scripts/db.js": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```\n/**\n * Database Initialization Script\n *\n * This script initializes the database by creating three tables: `users`, `stores`, and `storeUsers`.\n * It uses the `mysql2` library to connect to the database and the `util` library to promisify the query function.\n * The script reads environment variables from a `.env` file to configure the database connection.\n *\n * The `users` table stores user information, including a unique `userId`, `email`, and `username`.\n * The `stores` table stores store information, including a unique `storeHash`, `accessToken`, and `scope`.\n * The `storeUsers` table stores the relationship between users and stores, including a unique combination of `userId` and `storeHash`.\n *\n * The script creates these tables using SQL queries and then ends the database connection.\n */\n\nconst mysql = require('mysql2');\n",
    "scripts/bcSdk.js": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * bigCommerceSDK.js\n * \n * This file exports a function that initializes the BigCommerce JavaScript SDK.\n * The main purpose of this file is to load the BigCommerce SDK and set up an asynchronous initialization function.\n * \n * When the script is executed, it checks if the BigCommerce SDK has already been loaded. If not, it creates a new script tag and loads the SDK from a CDN.\n * Once the SDK is loaded, it sets up an asynchronous initialization function that is called when the SDK is ready.\n * \n * The initialization function sets up an event listener for the logout event, which sends a request to the server to log out the user.\n * \n * @param {string} context - The context in which the logout request is being made.\n * \n * @returns {void}\n */\nexport function bigCommerceSDK(context) {\n    //",
    "lib/hooks.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * This file exports a set of reusable SWR (SWR is a React Hooks library for data fetching) hooks \n * that can be used throughout the application to fetch data from the API. The hooks are designed \n * to be reusable and can be shared across components.\n * \n * The hooks provided in this file are:\n *  - useProducts: Fetches a list of products and returns the data, error, and loading state.\n *  - useProductList: Fetches a list of products and returns the data, error, and loading state.\n *  - useProductInfo: Fetches information about a specific product and returns the data, error, and loading state.\n *  - useOrder: Fetches an order by ID and returns the data, error, and loading state.\n *  - useShippingAndProductsInfo: Fetches shipping and",
    "lib/db.ts": "```\n\n**File Summary and Purpose**\n\nThis is a database connection module written in TypeScript, designed to dynamically select a database connection based on the environment variable `DB_TYPE`. The module imports database connection modules for Firebase and MySQL, and uses a switch statement to determine which database connection to use based on the value of `DB_TYPE`.\n\n**Main Functionality**\n\n1. The module imports the `Db` type from a separate file, which represents a database connection interface.\n2. It imports two database connection modules: `firebaseDB` and `sqlDB`, which are assumed to be implemented in separate files.\n3. The module uses the `process.env` object to retrieve the value of the `DB_TYPE` environment variable.\n4. A switch statement is used to determine which database connection to use based on the value of `DB_TYPE`. If `DB_TYPE` is set to `'firebase'`, the `firebaseDB` connection is used. If `DB_TYPE` is set to `'mysql'",
    "lib/auth.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * This file contains the core functionality for interacting with the BigCommerce API.\n * It provides functions for authorizing and verifying the application, as well as managing user sessions and data.\n *\n * The main purpose of this file is to provide a centralized location for handling BigCommerce API interactions,\n * including authentication, session management, and data removal.\n *\n * The file exports several functions, including:\n * - `bigcommerceClient`: Creates a new BigCommerce client instance with the provided access token and store hash.\n * - `getBCAuth`: Authorizes the application on install.\n * - `getBCVerify`: Verifies the application on load or uninstall.\n * - `setSession`: Sets the user session in the database.\n * - `getSession`: Retrieves the user session from the database.\n * - `encodePayload`: Encodes the user session data into a JWT.\n",
    "lib/dbs/mysql.ts": "```\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * Database interactions for storing and retrieving user and store data.\n * \n * This file exports several functions for interacting with a MySQL database,\n * including setting and retrieving user and store data, as well as deleting\n * user and store data.\n * \n * The database connection is established using the `mysql2` package, and the\n * `promisify` function is used to convert the `query` method to a promise-based\n * interface.\n * \n * The database configuration is stored in environment variables, and the\n * `MYSQL_CONFIG` object is used to create a pool of database connections.\n * \n * The main functions in this file are:\n * \n * - `setUser`: sets user data in the database\n * - `setStore`: sets store data in the database\n * - `setStoreUser`: sets store-specific user data in the",
    "lib/dbs/firebase.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * Firebase Firestore data management functions for BigCommerce apps.\n *\n * This file provides a set of functions for managing user and store data in a BigCommerce app using Firebase Firestore.\n * It includes functions for storing user data, setting store-specific variables, and managing store users.\n *\n * The main purpose of this file is to provide a centralized location for managing app data, making it easier to maintain and update the app's functionality.\n */\n\n// Firebase config and initialization\n// Prod applications might use config file\nconst { FIRE_API_KEY, FIRE_DOMAIN, FIRE_PROJECT_ID } = process.env;\nconst firebaseConfig = {\n    apiKey: FIRE_API_KEY,\n    authDomain: FIRE_DOMAIN,\n    projectId: FIRE_PROJECT_ID,\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n// Firestore data management functions\n\n/**\n * Stores global user data in Firestore.\n",
    "pages/api/load.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * This file contains the API route handler for the load function, which is responsible for verifying the user's session and redirecting them to the next page.\n * \n * The load function is called when the app is launched, and its primary purpose is to authenticate the user and set up their session.\n * \n * The function takes in a NextApiRequest object and a NextApiResponse object as parameters, which are used to handle the incoming request and send a response back to the client.\n * \n * The main functionality of this file can be broken down into the following steps:\n * \n * 1. Verify the user's session using the getBCVerify function, which checks the session token and returns the session object if it is valid.\n * 2. Encode the session object into a signed JWT using the encodePayload function, which prevents tampering and ensures the integrity",
    "pages/api/uninstall.ts": "```\n\nHere is a detailed comment for the provided code:\n\n```typescript\n/**\n * API endpoint for uninstalling a user's data store.\n * \n * This endpoint is responsible for verifying the user's session and removing their data store.\n * \n * @summary Uninstall user data store\n * @description This API endpoint is used to uninstall a user's data store.\n * \n * @param {NextApiRequest} req - The incoming request object.\n * @param {NextApiResponse} res - The outgoing response object.\n * \n * @returns {Promise<void>} A promise that resolves when the uninstallation is complete.\n */\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { getBCVerify, removeDataStore } from '../../lib/auth';\n\n/**\n * Uninstall the user's data store.\n * \n * This function verifies the user's session and removes their data store.\n * \n * @param {NextApiRequest} req - The incoming request object.\n * @param",
    "pages/api/removeUser.ts": "```\n\n**Summary and Main Purpose:**\n\nThis is a server-side API endpoint written in TypeScript, utilizing the Next.js framework. The main purpose of this code is to handle a request to remove a user's data from the system. The endpoint expects a query parameter containing a verification token, which is used to authenticate the user and subsequently remove their data.\n\n**Functionality:**\n\n1. The function `removeUser` is an async endpoint that takes two parameters: `req` (NextApiRequest) and `res` (NextApiResponse).\n2. It calls the `getBCVerify` function from the `../../lib/auth` module, passing the `req.query` object as an argument. This function is responsible for verifying the user's session using the provided verification token.\n3. Once the session is verified, the `removeUserData` function is called, passing the verified session as an argument. This function is responsible for removing the user's data from the system.\n4. If the removal",
    "pages/api/logout.ts": "```\n\nHere is a detailed comment for the given code:\n\n```\n/**\n * Handles the logout functionality for the application.\n * This API endpoint is responsible for logging out the current user and invalidating their session.\n *\n * @summary Logout API endpoint\n * @description This endpoint is called when the user initiates a logout action, such as clicking on the logout button.\n * It uses the `getSession` function to retrieve the current session, and then calls the `logoutUser` function to invalidate the session.\n * If the logout is successful, the endpoint returns a 200 status code. If an error occurs, it returns a status code corresponding to the error and a JSON response with the error message.\n *\n * @param {NextApiRequest} req - The incoming request object.\n * @param {NextApiResponse} res - The outgoing response object.\n * @returns {Promise<void>} - A promise that resolves when the logout process is complete.\n */\n\nimport { NextApiRequest, NextApiResponse }",
    "pages/api/auth.ts": "```\n\nHere is a detailed comment for the provided code:\n\n```\n/**\n * This is the authentication API endpoint for Next.js applications.\n * It handles the authentication process for the application on install.\n * The main purpose of this file is to verify the authenticity of the application\n * and establish a secure session with the backend.\n *\n * The function `auth` is the main entry point of this file, which takes in a\n * `NextApiRequest` and returns a `NextApiResponse`. It uses the `getBCAuth`\n * function to authenticate the application and obtain a session object.\n * It then encodes the session object into a signed JWT using the `encodePayload`\n * function to prevent tampering. Finally, it sets the session using the `setSession`\n * function and redirects the user to the application's root URL with the encoded\n * context as a query parameter.\n *\n * If any errors occur during the authentication process, the function catches the\n * error, extracts the",
    "pages/api/products/[pid].ts": "```\n\nHere is a detailed comment for the provided code:\n\n```typescript\n/**\n * This file contains an API endpoint for interacting with the BigCommerce API.\n * It handles GET and PUT requests for retrieving and updating product information.\n *\n * The endpoint uses the `getSession` function to retrieve the access token and store hash from the request.\n * It then uses the `bigcommerceClient` function to create a BigCommerce client instance with the retrieved credentials.\n *\n * The endpoint supports two methods:\n * - GET: Retrieves a product by ID.\n * - PUT: Updates a product by ID.\n *\n * If an error occurs during the request, the endpoint returns a 500 error response with a JSON body containing the error message.\n *\n * If the request method is not supported (i.e., not GET or PUT), the endpoint returns a 405 Method Not Allowed response.\n */\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth",
    "pages/api/products/index.ts": "```\n\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * This file exports an API endpoint handler for retrieving product summary data from a BigCommerce store.\n * \n * The handler uses the `bigcommerceClient` function from the `../../../lib/auth` module to authenticate with the BigCommerce API and retrieve the product summary data.\n * \n * The handler expects a `NextApiRequest` object containing the access token and store hash, which are used to authenticate the request.\n * \n * The handler returns a JSON response with the product summary data, or an error response with a status code and error message if the request fails.\n */\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n\n/**\n * Handles the API request to retrieve product summary data from the BigCommerce store.\n * \n * @param {NextApiRequest} req - The incoming request object",
    "pages/api/products/list.ts": "```\nHere is a detailed comment that includes a summary of the file and describes the main purpose and functionality:\n\n```javascript\n/**\n * API endpoint to retrieve a list of products from a BigCommerce store.\n *\n * This file exports a Next.js API route that handles GET requests to retrieve a list of products from a BigCommerce store.\n * The endpoint accepts query parameters for pagination, sorting, and filtering, and returns a JSON response containing the list of products.\n *\n * @summary Retrieve a list of products from a BigCommerce store\n * @description This API endpoint uses the BigCommerce API to retrieve a list of products from a store, and returns the response in JSON format.\n */\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { URLSearchParams } from 'url';\nimport { bigcommerceClient, getSession } from '../../../lib/auth';\n\n/**\n * API route handler function to retrieve a list of products from a BigCommerce store.\n *\n * This function is responsible for authenticating the",
    "pages/api/orders/[orderId]/shipping_products.ts": "```\n\nHere is a detailed comment for the provided code:\n\n```javascript\n/**\n * This API endpoint is responsible for retrieving shipping addresses and products associated with a specific order.\n * It uses the BigCommerce API to fetch the required information and returns it in a JSON format.\n *\n * @summary Retrieves shipping addresses and products for a given order\n * @description This API endpoint is designed to be used in a Next.js API route\n */\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../../lib/auth';\n\n/**\n * This function is the main entry point for the API endpoint.\n * It handles incoming requests and returns the required data in a JSON format.\n *\n * @param {NextApiRequest} req - The incoming request object\n * @param {NextApiResponse} res - The outgoing response object\n */\nexport default async function shippingAddressesAndProducts(req: NextApiRequest, res: NextApiResponse) {\n    // Extract the order ID from",
    "pages/api/orders/[orderId]/index.ts": "```\n\nHere is a detailed comment for the provided code:\n\n```javascript\n/**\n * This API endpoint is responsible for retrieving order information from a BigCommerce store.\n * It accepts a GET request with an order ID as a query parameter and returns the corresponding order data.\n * \n * The endpoint uses the BigCommerce API to authenticate and retrieve the order data.\n * It handles errors and returns a 405 status code if an unsupported method is used.\n * \n * @author [Your Name]\n * @version [Version Number]\n */\n\nimport { NextApiRequest, NextApiResponse } from 'next';\nimport { bigcommerceClient, getSession } from '../../../../lib/auth';\n\n/**\n * This is the main function that handles the API request.\n * It extracts the order ID from the query parameters and uses it to retrieve the order data from the BigCommerce API.\n * \n * @param {NextApiRequest} req - The incoming request object.\n * @param {NextApiResponse} res - The outgoing response object.\n"
}